clc, clear, close all

%% Logical Operators
%% Conditional Statments

a = 3;
b = 4;
c = 0;

% Conditional If Statment
if true
	c = sqrt(a^2 + b^2);
end

if a == 0
	a = sqrt(c^2 + b^2);
end

if a ~= 0
	a = sqrt(c^2 + b^2);
end

if a <= 0
	a = sqrt(c^2 + b^2);
end

aV = [1, 3, 2; 2, 3, 3; 2, 4, 3];
bV = [2, 3, 3,; 2, 3, 3; 3, 2, 3; 3, 3, 4]; % has more rows

% Check size of first dimension of matrix
if size(aV, 1) == size(bV, 1)
	aV = [aV, bV]
end

% Check size of second dimension of matrix
if size(aV, 2) == size(bV, 2)
	aV = [aV; bV]
end

number = randi([1, 100], 1, 1);

% Using remainder function to check if even or odd
if(rem(number, 2) == 0)
	number
else
	number = number * 2
end

%% Conditional Statements with Logical Operators
firstDimension = 3;
secondDimension = 5;
matrix = [];

% Logical OR
if (firstDimension == 3) || (secondDimension == 5)
	matrix = zeros(firstDimension, secondDimension);
end

% NOR ~
if ~(firstDimension == 3) || (secondDimension == 5)
	matrix = zeros(firstDimension, secondDimension);
end

% And
number = randi([1, 100], 1, 1);

if((number >= 20) && (number <= 40))
	numberTimesPi = number * pi
else 
	numberDividePi = number / pi
end

% Nand
number = randi([1, 100], 1, 1);

if ~((number >= 20) && (number <= 40))
	numberTimesPi = number * pi
else 
	numberDividePi = number / pi
end
	
%% Conditional Statements with Complex Logical Expressions
number = 50;

if(((rem(number, 2) == 0) || (rem(number, 5) == 0)) && ((number >= 30) && (number <= 60)))
	number
end

% Saving contions into variables
divisibleByTwoOrFive = (rem(number, 2) == 0) || (rem(number, 5) == 0);
withinThe30To60Range = ((number >= 30) && (number <= 60));

if(divisibleByTwoOrFive && withinThe30To60Range)
	number
end

%% Nested Condtional Statements
rows = 5;
cols = 5;
matrix = [];

% Nested if statement
if ((rows == cols) && (rows >= 3)) 
	matrix = ones(rows, cols)
	
	if(numel(matrix) >= 20)
		matrix = matrix * 9;
	end
end
 
%% Handling Multiple Cases Else-If

isSquareMatrix = (rows == cols);
isSizeInBteween3And5 = ((rows >= 3) && (rows <= 5));
isVerticalMatrix = (rows > cols);
isHorizontalMatrix = (rows < cols);

if (isSquareMatrix && isSizeInBteween3And5) 
	matrix = ones(rows, cols)
	
	if(numel(matrix) >= 20)
		matrix = matrix * 9;
	end
elseif (~isSquareMatrix)
	matrix = ones(rows, cols) * 2
	
	if(isVerticalMatrix)
		secondMatrix = ones(rows, cols) * 3;
	elseif(isHorizontalMatrix)
		secondMatrix = ones(rows, cols) * 4;
	end
else
	matrix = zeros(rows, cols);
	secondMatrix = zeros(rows, cols);
	
end
	
%% Handling Multiple Cases Switch 
number = 103;
secondNumber = 20;

switch (number)
		case 100
			number + 1;
		case 101
			number + 2;
		case 102
			number + 3;
		case 103
			number + 4;
		otherwise
			number
end

rows = 5;
matrix = [];

switch (rows) 
	case 3
		matrix = ones(rows) * 3;
	case 4
		matrix = ones(rows) * 4;
	case 5
		matrix = ones(rows) * 5;
	case 6
		matrix = ones(rows) * 6;
	otherwise
		matrix = zeros(rows);
end


